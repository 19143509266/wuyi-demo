{"version":3,"sources":["src/pages/Canvas/constructor.ts","src/pages/Canvas/index.tsx"],"sourcesContent":["// 定义通用类型\nexport interface Shape {\n  color: string\n  startX: number\n  startY: number\n  endX: number\n  endY: number\n  text: string\n\n  MinX: number\n  MaxX: number\n  MinY: number\n  MaxY: number\n\n  draw(devicePixelRatio: number): void\n  isInside(x: number, y: number): boolean\n}\n\n// 矩形\nexport class BuildRectShape implements Shape {\n  color: string\n  startX: number\n  startY: number\n  endX: number\n  endY: number\n  text: string\n  private ctx: CanvasRenderingContext2D\n\n  constructor(ctx: CanvasRenderingContext2D, color: string, startX: number, startY: number) {\n    this.ctx = ctx\n    this.color = color\n    this.startX = startX\n    this.startY = startY\n    this.endX = startX\n    this.endY = startY\n    this.text = ''\n  }\n\n  get MinX() {\n    return Math.min(this.startX, this.endX)\n  }\n\n  get MaxX() {\n    return Math.max(this.startX, this.endX)\n  }\n\n  get MinY() {\n    return Math.min(this.startY, this.endY)\n  }\n\n  get MaxY() {\n    return Math.max(this.startY, this.endY)\n  }\n\n  draw(devicePixelRatio: number) {\n    const ctx = this.ctx\n    ctx.beginPath()\n    ctx.moveTo(this.MinX * devicePixelRatio, this.MinY * devicePixelRatio)\n    ctx.lineTo(this.MaxX * devicePixelRatio, this.MinY * devicePixelRatio)\n    ctx.lineTo(this.MaxX * devicePixelRatio, this.MaxY * devicePixelRatio)\n    ctx.lineTo(this.MinX * devicePixelRatio, this.MaxY * devicePixelRatio)\n    ctx.lineTo(this.MinX * devicePixelRatio, this.MinY * devicePixelRatio)\n    ctx.fillStyle = this.color\n    ctx.fill()\n    ctx.lineCap = 'square'\n    ctx.strokeStyle = '#fff'\n    ctx.lineWidth = 3\n    ctx.stroke()\n    if (this.text) {\n      ctx.font = '16px Arial'\n      ctx.fillStyle = 'black'\n      ctx.textAlign = 'center'\n      ctx.textBaseline = 'middle'\n      ctx.fillText(\n        this.text,\n        ((this.MinX + this.MaxX) / 2) * devicePixelRatio,\n        ((this.MinY + this.MaxY) / 2) * devicePixelRatio\n      )\n    }\n  }\n\n  isInside(x: number, y: number): boolean {\n    return x >= this.MinX && x <= this.MaxX && y >= this.MinY && y <= this.MaxY\n  }\n}\n\n// 圆形\nexport class BuildRoundShape implements Shape {\n  color: string\n  startX: number\n  startY: number\n  endX: number\n  endY: number\n  text: string\n  private ctx: CanvasRenderingContext2D\n\n  constructor(ctx: CanvasRenderingContext2D, color: string, startX: number, startY: number) {\n    this.ctx = ctx\n    this.color = color\n    this.startX = startX\n    this.startY = startY\n    this.endX = startX\n    this.endY = startY\n    this.text = ''\n  }\n\n  get MinX() {\n    return Math.min(this.startX, this.endX)\n  }\n\n  get MaxX() {\n    return Math.max(this.startX, this.endX)\n  }\n\n  get MinY() {\n    return Math.min(this.startY, this.endY)\n  }\n\n  get MaxY() {\n    return Math.max(this.startY, this.endY)\n  }\n\n  get centerX() {\n    return (this.startX + this.endX) / 2\n  }\n\n  get centerY() {\n    return (this.startY + this.endY) / 2\n  }\n\n  get radius() {\n    const dx = this.endX - this.startX\n    const dy = this.endY - this.startY\n    return Math.sqrt(dx * dx + dy * dy) / 2\n  }\n\n  draw(devicePixelRatio: number) {\n    const ctx = this.ctx\n    ctx.beginPath()\n    ctx.arc(\n      this.centerX * devicePixelRatio,\n      this.centerY * devicePixelRatio,\n      this.radius * devicePixelRatio,\n      0,\n      Math.PI * 2\n    )\n    ctx.fillStyle = this.color\n    ctx.fill()\n    ctx.lineCap = 'square'\n    ctx.strokeStyle = '#fff'\n    ctx.lineWidth = 3\n    ctx.stroke()\n    if (this.text) {\n      ctx.font = '16px Arial'\n      ctx.fillStyle = 'black'\n      ctx.textAlign = 'center'\n      ctx.textBaseline = 'middle'\n      ctx.fillText(this.text, this.centerX * devicePixelRatio, this.centerY * devicePixelRatio)\n    }\n  }\n\n  isInside(x: number, y: number): boolean {\n    const dx = x - this.centerX\n    const dy = y - this.centerY\n    return Math.sqrt(dx * dx + dy * dy) <= this.radius\n  }\n}\n\n// 椭圆\nexport class BuildEllipseShape implements Shape {\n  color: string\n  startX: number\n  startY: number\n  endX: number\n  endY: number\n  text: string\n  private ctx: CanvasRenderingContext2D\n\n  constructor(ctx: CanvasRenderingContext2D, color: string, startX: number, startY: number) {\n    this.ctx = ctx\n    this.color = color\n    this.startX = startX\n    this.startY = startY\n    this.endX = startX\n    this.endY = startY\n    this.text = ''\n  }\n\n  get MinX() {\n    return Math.min(this.startX, this.endX)\n  }\n\n  get MaxX() {\n    return Math.max(this.startX, this.endX)\n  }\n\n  get MinY() {\n    return Math.min(this.startY, this.endY)\n  }\n\n  get MaxY() {\n    return Math.max(this.startY, this.endY)\n  }\n\n  get centerX() {\n    return (this.startX + this.endX) / 2\n  }\n\n  get centerY() {\n    return (this.startY + this.endY) / 2\n  }\n\n  get radiusX() {\n    return Math.abs(this.endX - this.startX) / 2\n  }\n\n  get radiusY() {\n    return Math.abs(this.endY - this.startY) / 2\n  }\n\n  draw(devicePixelRatio: number) {\n    const ctx = this.ctx\n    ctx.beginPath()\n    ctx.ellipse(\n      this.centerX * devicePixelRatio,\n      this.centerY * devicePixelRatio,\n      this.radiusX * devicePixelRatio,\n      this.radiusY * devicePixelRatio,\n      0,\n      0,\n      Math.PI * 2\n    )\n    ctx.fillStyle = this.color\n    ctx.fill()\n    ctx.lineCap = 'square'\n    ctx.strokeStyle = '#fff'\n    ctx.lineWidth = 3\n    ctx.stroke()\n    if (this.text) {\n      ctx.font = '16px Arial'\n      ctx.fillStyle = 'black'\n      ctx.textAlign = 'center'\n      ctx.textBaseline = 'middle'\n      ctx.fillText(this.text, this.centerX * devicePixelRatio, this.centerY * devicePixelRatio)\n    }\n  }\n\n  isInside(x: number, y: number): boolean {\n    const dx = (x - this.centerX) / this.radiusX\n    const dy = (y - this.centerY) / this.radiusY\n    return dx * dx + dy * dy <= 1\n  }\n}\n","import React, { useRef, useEffect, useState } from 'react'\nimport { BuildRectShape, BuildRoundShape, BuildEllipseShape, Shape } from './constructor'\nimport { Radio, ColorPicker, Space, Input, InputRef } from 'antd'\n\nconst Canvas = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const inputRef = useRef<InputRef>(null)\n  const [shapeType, setShapeType] = useState('rect')\n  const [color, setColor] = useState<string>('#1677ff')\n  const [shapes, setShapes] = useState<Shape[]>([])\n  const [activeShape, setActiveShape] = useState<Shape | null>(null)\n  const [inputPosition, setInputPosition] = useState<{ x: number; y: number; text: string } | null>(\n    null\n  )\n\n  const getIsInside = (x: number, y: number) => {\n    for (let i = 0; i < shapes.length; i++) {\n      if (shapes[i].isInside(x, y)) {\n        return shapes[i]\n      }\n    }\n    return null\n  }\n\n  useEffect(() => {\n    const cvs = canvasRef.current\n    if (!cvs) return\n    const ctx = cvs.getContext('2d')\n    if (!ctx) return\n    const w = 800\n    const h = 500\n    cvs.width = w * devicePixelRatio\n    cvs.height = h * devicePixelRatio\n    cvs.style.width = `${w}px`\n    cvs.style.height = `${h}px`\n    cvs.style.backgroundColor = '#808080'\n\n    cvs.onmousedown = function (e) {\n      const cvsRect = cvs.getBoundingClientRect()\n      const clickX = e.clientX - cvsRect.left\n      const clickY = e.clientY - cvsRect.top\n      const isInside = getIsInside(clickX, clickY)\n      if (isInside) {\n        const { startX, startY, endX, endY } = isInside\n        // 拖动\n        window.onmouseup = function () {\n          window.onmousemove = null\n          window.onmouseup = null\n        }\n        window.onmousemove = function (e) {\n          const disX = e.clientX - cvsRect.left - clickX\n          const disY = e.clientY - cvsRect.top - clickY\n          isInside.startX = startX + disX\n          isInside.endX = endX + disX\n          isInside.startY = startY + disY\n          isInside.endY = endY + disY\n        }\n      } else {\n        // 新建\n        let newShape: Shape | null = null\n        if (shapeType === 'rect') {\n          newShape = new BuildRectShape(ctx, color, clickX, clickY)\n        } else if (shapeType === 'round') {\n          newShape = new BuildRoundShape(ctx, color, clickX, clickY)\n        } else if (shapeType === 'ellipse') {\n          newShape = new BuildEllipseShape(ctx, color, clickX, clickY)\n        }\n        if (newShape) {\n          setShapes(pre => [...pre, newShape])\n        }\n        window.onmouseup = function () {\n          window.onmousemove = null\n          window.onmouseup = null\n        }\n        window.onmousemove = function (e) {\n          const clientX = e.clientX - cvsRect.left\n          const clientY = e.clientY - cvsRect.top\n          if (newShape) {\n            newShape.endX = clientX\n            newShape.endY = clientY\n          }\n        }\n      }\n    }\n\n    cvs.ondblclick = function (e) {\n      const cvsRect = cvs.getBoundingClientRect()\n      const clickX = e.clientX - cvsRect.left\n      const clickY = e.clientY - cvsRect.top\n      const shape = getIsInside(clickX, clickY)\n      if (shape) {\n        setActiveShape(shape)\n        setInputPosition({ x: e.clientX, y: e.clientY, text: shape.text })\n        setTimeout(() => {\n          inputRef.current?.focus()\n        }, 0)\n      }\n    }\n  }, [shapeType, color, shapes])\n\n  useEffect(() => {\n    function draw() {\n      const cvs = canvasRef.current\n      if (!cvs) return\n      const ctx = cvs.getContext('2d')\n      if (!ctx || !cvs) return\n      ctx.clearRect(0, 0, cvs.width, cvs.height)\n      shapes.forEach(shape => shape.draw(devicePixelRatio))\n      requestAnimationFrame(draw)\n    }\n\n    draw()\n  }, [shapes])\n\n  const handleInputBlur = () => {\n    if (activeShape) {\n      activeShape.text = inputRef.current?.input?.value || ''\n      setInputPosition(null)\n      setActiveShape(null)\n    }\n  }\n\n  return (\n    <div\n      style={{\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        flexDirection: 'column'\n      }}\n    >\n      <Space style={{ marginBottom: 6 }}>\n        <ColorPicker\n          value={color}\n          onChange={e => {\n            setColor(e.toRgbString())\n          }}\n        />\n        <Radio.Group value={shapeType} onChange={e => setShapeType(e.target.value)}>\n          <Radio value=\"rect\">矩形</Radio>\n          <Radio value=\"ellipse\">椭圆</Radio>\n          <Radio value=\"round\">圆</Radio>\n        </Radio.Group>\n      </Space>\n      <canvas ref={canvasRef}></canvas>\n      {inputPosition && (\n        <Input\n          ref={inputRef}\n          style={{\n            position: 'fixed',\n            left: inputPosition.x,\n            top: inputPosition.y,\n            display: 'block',\n            width: 200\n          }}\n          defaultValue={inputPosition.text}\n          onBlur={handleInputBlur}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default Canvas\n"],"names":[],"mappings":"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"}